// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Cake.Msg.en');

goog.require('Blockly.Cake.Msg');

Blockly.Cake.Msg.ADD_COMMENT = "Add Comment";
Blockly.Cake.Msg.AUTH = "Please authorize this app to enable your work to be saved and to allow it to be shared by you.";
Blockly.Cake.Msg.CHANGE_VALUE_TITLE = "Change value:";
Blockly.Cake.Msg.CHAT = "Chat with your collaborator by typing in this box!";
Blockly.Cake.Msg.COLLAPSE_ALL = "Collapse Blocks";
Blockly.Cake.Msg.COLLAPSE_BLOCK = "Collapse Block";
Blockly.Cake.Msg.COLOUR_BLEND_COLOUR1 = "colour 1";
Blockly.Cake.Msg.COLOUR_BLEND_COLOUR2 = "colour 2";
Blockly.Cake.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Cake.Msg.COLOUR_BLEND_RATIO = "ratio";
Blockly.Cake.Msg.COLOUR_BLEND_TITLE = "blend";
Blockly.Cake.Msg.COLOUR_BLEND_TOOLTIP = "Blends two colours together with a given ratio (0.0 - 1.0).";
Blockly.Cake.Msg.COLOUR_PICKER_HELPURL = "https://en.wikipedia.org/wiki/Color";
Blockly.Cake.Msg.COLOUR_PICKER_TOOLTIP = "Choose a colour from the palette.";
Blockly.Cake.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";
Blockly.Cake.Msg.COLOUR_RANDOM_TITLE = "random colour";
Blockly.Cake.Msg.COLOUR_RANDOM_TOOLTIP = "Choose a colour at random.";
Blockly.Cake.Msg.COLOUR_RGB_BLUE = "blue";
Blockly.Cake.Msg.COLOUR_RGB_GREEN = "green";
Blockly.Cake.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
Blockly.Cake.Msg.COLOUR_RGB_RED = "red";
Blockly.Cake.Msg.COLOUR_RGB_TITLE = "colour with";
Blockly.Cake.Msg.COLOUR_RGB_TOOLTIP = "Create a colour with the specified amount of red, green, and blue.  All values must be between 0 and 100.";
Blockly.Cake.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#Loop_Termination_Blocks";
Blockly.Cake.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "break out of loop";
Blockly.Cake.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "continue with next iteration of loop";
Blockly.Cake.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Break out of the containing loop.";
Blockly.Cake.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Skip the rest of this loop, and continue with the next iteration.";
Blockly.Cake.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Warning: This block may only be used within a loop.";
Blockly.Cake.Msg.CONTROLS_FOREACH_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#for_each for each block";
Blockly.Cake.Msg.CONTROLS_FOREACH_INPUT_INLIST = "in list";
Blockly.Cake.Msg.CONTROLS_FOREACH_INPUT_INLIST_TAIL = "";
Blockly.Cake.Msg.CONTROLS_FOREACH_INPUT_ITEM = "for each item";
Blockly.Cake.Msg.CONTROLS_FOREACH_TOOLTIP = "For each item in a list, set the variable '%1' to the item, and then do some statements.";
Blockly.Cake.Msg.CONTROLS_FOR_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#count_with";
Blockly.Cake.Msg.CONTROLS_FOR_INPUT_FROM_TO_BY = "from %1 to %2 by %3";
Blockly.Cake.Msg.CONTROLS_FOR_INPUT_WITH = "repeat with";
Blockly.Cake.Msg.CONTROLS_FOR_TOOLTIP = "Have the variable %1 take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.";
Blockly.Cake.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Add a condition to the if block.";
Blockly.Cake.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Add a final, catch-all condition to the if block.";
Blockly.Cake.Msg.CONTROLS_IF_HELPURL = "https://code.google.com/p/blockly/wiki/If_Then";
Blockly.Cake.Msg.CONTROLS_IF_IF_TOOLTIP = "Add, remove, or reorder sections to reconfigure this if block.";
Blockly.Cake.Msg.CONTROLS_IF_MSG_ELSE = "else";
Blockly.Cake.Msg.CONTROLS_IF_MSG_ELSEIF = "else if";
Blockly.Cake.Msg.CONTROLS_IF_MSG_IF = "if";
Blockly.Cake.Msg.CONTROLS_IF_TOOLTIP_1 = "If a value is true, then do some statements.";
Blockly.Cake.Msg.CONTROLS_IF_TOOLTIP_2 = "If a value is true, then do the first block of statements.  Otherwise, do the second block of statements.";
Blockly.Cake.Msg.CONTROLS_IF_TOOLTIP_3 = "If the first value is true, then do the first block of statements.  Otherwise, if the second value is true, do the second block of statements.";
Blockly.Cake.Msg.CONTROLS_IF_TOOLTIP_4 = "If the first value is true, then do the first block of statements.  Otherwise, if the second value is true, do the second block of statements.  If none of the values are true, do the last block of statements.";
Blockly.Cake.Msg.CONTROLS_REPEAT_HELPURL = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Cake.Msg.CONTROLS_REPEAT_INPUT_DO = "do";
Blockly.Cake.Msg.CONTROLS_REPEAT_TITLE = "repeat %1 times";
Blockly.Cake.Msg.CONTROLS_REPEAT_TITLE_REPEAT = "repeat";
Blockly.Cake.Msg.CONTROLS_REPEAT_TITLE_TIMES = "times";
Blockly.Cake.Msg.CONTROLS_REPEAT_TOOLTIP = "Do some statements several times.";
Blockly.Cake.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#repeat";
Blockly.Cake.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "repeat until";
Blockly.Cake.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "repeat while";
Blockly.Cake.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "While a value is false, then do some statements.";
Blockly.Cake.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "While a value is true, then do some statements.";
Blockly.Cake.Msg.DELETE_BLOCK = "Delete Block";
Blockly.Cake.Msg.DELETE_X_BLOCKS = "Delete %1 Blocks";
Blockly.Cake.Msg.DISABLE_BLOCK = "Disable Block";
Blockly.Cake.Msg.DUPLICATE_BLOCK = "Duplicate";
Blockly.Cake.Msg.ENABLE_BLOCK = "Enable Block";
Blockly.Cake.Msg.EXPAND_ALL = "Expand Blocks";
Blockly.Cake.Msg.EXPAND_BLOCK = "Expand Block";
Blockly.Cake.Msg.EXTERNAL_INPUTS = "External Inputs";
Blockly.Cake.Msg.HELP = "Help";
Blockly.Cake.Msg.INLINE_INPUTS = "Inline Inputs";
Blockly.Cake.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://en.wikipedia.org/wiki/Linked_list#Empty_lists";
Blockly.Cake.Msg.LISTS_CREATE_EMPTY_TITLE = "create empty list";
Blockly.Cake.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Returns a list, of length 0, containing no data records";
Blockly.Cake.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "list";
Blockly.Cake.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Add, remove, or reorder sections to reconfigure this list block.";
Blockly.Cake.Msg.LISTS_CREATE_WITH_INPUT_WITH = "create list with";
Blockly.Cake.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Add an item to the list.";
Blockly.Cake.Msg.LISTS_CREATE_WITH_TOOLTIP = "Create a list with any number of items.";
Blockly.Cake.Msg.LISTS_GET_INDEX_FIRST = "first";
Blockly.Cake.Msg.LISTS_GET_INDEX_FROM_END = "# from end";
Blockly.Cake.Msg.LISTS_GET_INDEX_FROM_START = "#";
Blockly.Cake.Msg.LISTS_GET_INDEX_GET = "get";
Blockly.Cake.Msg.LISTS_GET_INDEX_GET_REMOVE = "get and remove";
Blockly.Cake.Msg.LISTS_GET_INDEX_LAST = "last";
Blockly.Cake.Msg.LISTS_GET_INDEX_RANDOM = "random";
Blockly.Cake.Msg.LISTS_GET_INDEX_REMOVE = "remove";
Blockly.Cake.Msg.LISTS_GET_INDEX_TAIL = "";
Blockly.Cake.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Returns the first item in a list.";
Blockly.Cake.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Returns the item at the specified position in a list.  #1 is the last item.";
Blockly.Cake.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Returns the item at the specified position in a list.  #1 is the first item.";
Blockly.Cake.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Returns the last item in a list.";
Blockly.Cake.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Returns a random item in a list.";
Blockly.Cake.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Removes and returns the first item in a list.";
Blockly.Cake.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Removes and returns the item at the specified position in a list.  #1 is the last item.";
Blockly.Cake.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Removes and returns the item at the specified position in a list.  #1 is the first item.";
Blockly.Cake.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Removes and returns the last item in a list.";
Blockly.Cake.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Removes and returns a random item in a list.";
Blockly.Cake.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Removes the first item in a list.";
Blockly.Cake.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Removes the item at the specified position in a list.  #1 is the last item.";
Blockly.Cake.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Removes the item at the specified position in a list.  #1 is the first item.";
Blockly.Cake.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Removes the last item in a list.";
Blockly.Cake.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Removes a random item in a list.";
Blockly.Cake.Msg.LISTS_GET_SUBLIST_END_FROM_END = "to # from end";
Blockly.Cake.Msg.LISTS_GET_SUBLIST_END_FROM_START = "to #";
Blockly.Cake.Msg.LISTS_GET_SUBLIST_END_LAST = "to last";
Blockly.Cake.Msg.LISTS_GET_SUBLIST_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#Getting_a_sublist";
Blockly.Cake.Msg.LISTS_GET_SUBLIST_START_FIRST = "get sub-list from first";
Blockly.Cake.Msg.LISTS_GET_SUBLIST_START_FROM_END = "get sub-list from # from end";
Blockly.Cake.Msg.LISTS_GET_SUBLIST_START_FROM_START = "get sub-list from #";
Blockly.Cake.Msg.LISTS_GET_SUBLIST_TAIL = "";
Blockly.Cake.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Creates a copy of the specified portion of a list.";
Blockly.Cake.Msg.LISTS_INDEX_OF_FIRST = "find first occurrence of item";
Blockly.Cake.Msg.LISTS_INDEX_OF_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#Getting_Items_from_a_List";
Blockly.Cake.Msg.LISTS_INDEX_OF_LAST = "find last occurrence of item";
Blockly.Cake.Msg.LISTS_INDEX_OF_TOOLTIP = "Returns the index of the first/last occurrence of the item in the list.  Returns 0 if text is not found.";
Blockly.Cake.Msg.LISTS_INLIST = "in list";
Blockly.Cake.Msg.LISTS_IS_EMPTY_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#is_empty";
Blockly.Cake.Msg.LISTS_IS_EMPTY_TITLE = "%1 is empty";
Blockly.Cake.Msg.LISTS_LENGTH_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#length_of";
Blockly.Cake.Msg.LISTS_LENGTH_TITLE = "length of %1";
Blockly.Cake.Msg.LISTS_LENGTH_TOOLTIP = "Returns the length of a list.";
Blockly.Cake.Msg.LISTS_REPEAT_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#create_list_with";
Blockly.Cake.Msg.LISTS_REPEAT_TITLE = "create list with item %1 repeated %2 times";
Blockly.Cake.Msg.LISTS_REPEAT_TOOLTIP = "Creates a list consisting of the given value repeated the specified number of times.";
Blockly.Cake.Msg.LISTS_SET_INDEX_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#in_list_..._set";
Blockly.Cake.Msg.LISTS_SET_INDEX_INPUT_TO = "as";
Blockly.Cake.Msg.LISTS_SET_INDEX_INSERT = "insert at";
Blockly.Cake.Msg.LISTS_SET_INDEX_SET = "set";
Blockly.Cake.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Inserts the item at the start of a list.";
Blockly.Cake.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Inserts the item at the specified position in a list.  #1 is the last item.";
Blockly.Cake.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Inserts the item at the specified position in a list.  #1 is the first item.";
Blockly.Cake.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Append the item to the end of a list.";
Blockly.Cake.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Inserts the item randomly in a list.";
Blockly.Cake.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Sets the first item in a list.";
Blockly.Cake.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Sets the item at the specified position in a list.  #1 is the last item.";
Blockly.Cake.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Sets the item at the specified position in a list.  #1 is the first item.";
Blockly.Cake.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Sets the last item in a list.";
Blockly.Cake.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Sets a random item in a list.";
Blockly.Cake.Msg.LISTS_TOOLTIP = "Returns true if the list is empty.";
Blockly.Cake.Msg.LOGIC_BOOLEAN_FALSE = "false";
Blockly.Cake.Msg.LOGIC_BOOLEAN_HELPURL = "https://code.google.com/p/blockly/wiki/True_False";
Blockly.Cake.Msg.LOGIC_BOOLEAN_TOOLTIP = "Returns either true or false.";
Blockly.Cake.Msg.LOGIC_BOOLEAN_TRUE = "true";
Blockly.Cake.Msg.LOGIC_COMPARE_HELPURL = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Cake.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Return true if both inputs equal each other.";
Blockly.Cake.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Return true if the first input is greater than the second input.";
Blockly.Cake.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Return true if the first input is greater than or equal to the second input.";
Blockly.Cake.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Return true if the first input is smaller than the second input.";
Blockly.Cake.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Return true if the first input is smaller than or equal to the second input.";
Blockly.Cake.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Return true if both inputs are not equal to each other.";
Blockly.Cake.Msg.LOGIC_NEGATE_HELPURL = "https://en.wikipedia.org/wiki/Negation";
Blockly.Cake.Msg.LOGIC_NEGATE_TITLE = "not %1";
Blockly.Cake.Msg.LOGIC_NEGATE_TOOLTIP = "Returns true if the input is false.  Returns false if the input is true.";
Blockly.Cake.Msg.LOGIC_NULL = "null";
Blockly.Cake.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Cake.Msg.LOGIC_NULL_TOOLTIP = "Returns null.";
Blockly.Cake.Msg.LOGIC_OPERATION_AND = "and";
Blockly.Cake.Msg.LOGIC_OPERATION_HELPURL = "https://code.google.com/p/blockly/wiki/And_Or";
Blockly.Cake.Msg.LOGIC_OPERATION_OR = "or";
Blockly.Cake.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Return true if both inputs are true.";
Blockly.Cake.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Return true if at least one of the inputs is true.";
Blockly.Cake.Msg.LOGIC_TERNARY_CONDITION = "test";
Blockly.Cake.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Cake.Msg.LOGIC_TERNARY_IF_FALSE = "if false";
Blockly.Cake.Msg.LOGIC_TERNARY_IF_TRUE = "if true";
Blockly.Cake.Msg.LOGIC_TERNARY_TOOLTIP = "Check the condition in 'test'. If the condition is true, returns the 'if true' value; otherwise returns the 'if false' value.";
Blockly.Cake.Msg.MATH_ADDITION_SYMBOL = "+";
Blockly.Cake.Msg.MATH_ARITHMETIC_HELPURL = "https://en.wikipedia.org/wiki/Arithmetic";
Blockly.Cake.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Return the sum of the two numbers.";
Blockly.Cake.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Return the quotient of the two numbers.";
Blockly.Cake.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Return the difference of the two numbers.";
Blockly.Cake.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Return the product of the two numbers.";
Blockly.Cake.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Return the first number raised to the power of the second number.";
Blockly.Cake.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Cake.Msg.MATH_CHANGE_INPUT_BY = "by";
Blockly.Cake.Msg.MATH_CHANGE_TITLE_CHANGE = "change";
Blockly.Cake.Msg.MATH_CHANGE_TOOLTIP = "Add a number to variable '%1'.";
Blockly.Cake.Msg.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Cake.Msg.MATH_CONSTANT_TOOLTIP = "Return one of the common constants: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";
Blockly.Cake.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";
Blockly.Cake.Msg.MATH_CONSTRAIN_TITLE = "constrain %1 low %2 high %3";
Blockly.Cake.Msg.MATH_CONSTRAIN_TOOLTIP = "Constrain a number to be between the specified limits (inclusive).";
Blockly.Cake.Msg.MATH_DIVISION_SYMBOL = "÷";
Blockly.Cake.Msg.MATH_IS_DIVISIBLE_BY = "is divisible by";
Blockly.Cake.Msg.MATH_IS_EVEN = "is even";
Blockly.Cake.Msg.MATH_IS_NEGATIVE = "is negative";
Blockly.Cake.Msg.MATH_IS_ODD = "is odd";
Blockly.Cake.Msg.MATH_IS_POSITIVE = "is positive";
Blockly.Cake.Msg.MATH_IS_PRIME = "is prime";
Blockly.Cake.Msg.MATH_IS_TOOLTIP = "Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number.  Returns true or false.";
Blockly.Cake.Msg.MATH_IS_WHOLE = "is whole";
Blockly.Cake.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Cake.Msg.MATH_MODULO_TITLE = "remainder of %1 ÷ %2";
Blockly.Cake.Msg.MATH_MODULO_TOOLTIP = "Return the remainder from dividing the two numbers.";
Blockly.Cake.Msg.MATH_MULTIPLICATION_SYMBOL = "×";
Blockly.Cake.Msg.MATH_NUMBER_HELPURL = "https://en.wikipedia.org/wiki/Number";
Blockly.Cake.Msg.MATH_NUMBER_TOOLTIP = "A number.";
Blockly.Cake.Msg.MATH_ONLIST_HELPURL = "";
Blockly.Cake.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "average of list";
Blockly.Cake.Msg.MATH_ONLIST_OPERATOR_MAX = "max of list";
Blockly.Cake.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "median of list";
Blockly.Cake.Msg.MATH_ONLIST_OPERATOR_MIN = "min of list";
Blockly.Cake.Msg.MATH_ONLIST_OPERATOR_MODE = "modes of list";
Blockly.Cake.Msg.MATH_ONLIST_OPERATOR_RANDOM = "random item of list";
Blockly.Cake.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "standard deviation of list";
Blockly.Cake.Msg.MATH_ONLIST_OPERATOR_SUM = "sum of list";
Blockly.Cake.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Return the average (arithmetic mean) of the numeric values in the list.";
Blockly.Cake.Msg.MATH_ONLIST_TOOLTIP_MAX = "Return the largest number in the list.";
Blockly.Cake.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Return the median number in the list.";
Blockly.Cake.Msg.MATH_ONLIST_TOOLTIP_MIN = "Return the smallest number in the list.";
Blockly.Cake.Msg.MATH_ONLIST_TOOLTIP_MODE = "Return a list of the most common item(s) in the list.";
Blockly.Cake.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Return a random element from the list.";
Blockly.Cake.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Return the standard deviation of the list.";
Blockly.Cake.Msg.MATH_ONLIST_TOOLTIP_SUM = "Return the sum of all the numbers in the list.";
Blockly.Cake.Msg.MATH_POWER_SYMBOL = "^";
Blockly.Cake.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Cake.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "random fraction";
Blockly.Cake.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).";
Blockly.Cake.Msg.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Cake.Msg.MATH_RANDOM_INT_TITLE = "random integer from %1 to %2";
Blockly.Cake.Msg.MATH_RANDOM_INT_TOOLTIP = "Return a random integer between the two specified limits, inclusive.";
Blockly.Cake.Msg.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Cake.Msg.MATH_ROUND_OPERATOR_ROUND = "round";
Blockly.Cake.Msg.MATH_ROUND_OPERATOR_CEIL = "round up";
Blockly.Cake.Msg.MATH_ROUND_OPERATOR_FLOOR = "round down";
Blockly.Cake.Msg.MATH_ROUND_OPERATOR_TRUNC = "truncate";
Blockly.Cake.Msg.MATH_ROUND_TOOLTIP = "Round a number up or down or truncate.";
Blockly.Cake.Msg.MATH_SINGLE_HELPURL = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Cake.Msg.MATH_SINGLE_OP_ABSOLUTE = "absolute";
Blockly.Cake.Msg.MATH_SINGLE_OP_ROOT = "square root";
Blockly.Cake.Msg.MATH_SINGLE_TOOLTIP_ABS = "Return the absolute value of a number.";
Blockly.Cake.Msg.MATH_SINGLE_TOOLTIP_EXP = "Return e to the power of a number.";
Blockly.Cake.Msg.MATH_SINGLE_TOOLTIP_LOG = "Return the natural logarithm of a number.";
Blockly.Cake.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Return the base 10 logarithm of a number.";
Blockly.Cake.Msg.MATH_SINGLE_TOOLTIP_LOG2 = "Return the base 2 logarithm of a number.";
Blockly.Cake.Msg.MATH_SINGLE_TOOLTIP_NEG = "Return the negation of a number.";
Blockly.Cake.Msg.MATH_SINGLE_TOOLTIP_POW = "Return base to the power of a number.";
Blockly.Cake.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Return the square root of a number.";
Blockly.Cake.Msg.MATH_SUBTRACTION_SYMBOL = "-";
Blockly.Cake.Msg.MATH_TRIG_ACOS = "acos";
Blockly.Cake.Msg.MATH_TRIG_ASIN = "asin";
Blockly.Cake.Msg.MATH_TRIG_ATAN = "atan";
Blockly.Cake.Msg.MATH_TRIG_COS = "cos";
Blockly.Cake.Msg.MATH_TRIG_HELPURL = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Cake.Msg.MATH_TRIG_SIN = "sin";
Blockly.Cake.Msg.MATH_TRIG_TAN = "tan";
Blockly.Cake.Msg.MATH_TRIG_LOG = "log";
Blockly.Cake.Msg.MATH_TRIG_LOG10 = "log10";
Blockly.Cake.Msg.MATH_TRIG_LOG2 = "log2";
Blockly.Cake.Msg.MATH_TRIG_TOOLTIP_ACOS = "Return the arccosine of a number.";
Blockly.Cake.Msg.MATH_TRIG_TOOLTIP_ASIN = "Return the arcsine of a number.";
Blockly.Cake.Msg.MATH_TRIG_TOOLTIP_ATAN = "Return the arctangent of a number.";
Blockly.Cake.Msg.MATH_TRIG_TOOLTIP_COS = "Return the cosine of a degree (not radian).";
Blockly.Cake.Msg.MATH_TRIG_TOOLTIP_SIN = "Return the sine of a degree (not radian).";
Blockly.Cake.Msg.MATH_TRIG_TOOLTIP_TAN = "Return the tangent of a degree (not radian).";
Blockly.Cake.Msg.ME = "Me";
Blockly.Cake.Msg.NEW_VARIABLE = "New variable...";
Blockly.Cake.Msg.NEW_VARIABLE_TITLE = "New variable name:";
Blockly.Cake.Msg.ORDINAL_NUMBER_SUFFIX = "";
Blockly.Cake.Msg.PROCEDURES_ALLOW_STATEMENTS = "allow statements";
Blockly.Cake.Msg.PROCEDURES_BEFORE_PARAMS = "with:";
Blockly.Cake.Msg.PROCEDURES_CALLNORETURN_CALL = "";
Blockly.Cake.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Cake.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Run the user-defined function '%1'.";
Blockly.Cake.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Cake.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Run the user-defined function '%1' and use its output.";
Blockly.Cake.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "with:";
Blockly.Cake.Msg.PROCEDURES_CREATE_DO = "Create '%1'";
Blockly.Cake.Msg.PROCEDURES_DEFNORETURN_DO = "";
Blockly.Cake.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Cake.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "do something";
Blockly.Cake.Msg.PROCEDURES_DEFNORETURN_TITLE = "function name";
Blockly.Cake.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Creates a function with no output.";
Blockly.Cake.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Cake.Msg.PROCEDURES_DEFRETURN_RETURN = "return";
Blockly.Cake.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Creates a function with an output.";
Blockly.Cake.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Warning: This function has duplicate parameters.";
Blockly.Cake.Msg.PROCEDURES_HIGHLIGHT_DEF = "Highlight function definition";
Blockly.Cake.Msg.PROCEDURES_IFRETURN_TOOLTIP = "If a value is true, then return a second value.";
Blockly.Cake.Msg.PROCEDURES_IFRETURN_WARNING = "Warning: This block may be used only within a function definition.";
Blockly.Cake.Msg.PROCEDURES_MUTATORARG_TITLE = "input name:";
Blockly.Cake.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Add an input to the function.";
Blockly.Cake.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "inputs";
Blockly.Cake.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Add, remove, or reorder inputs to this function.";
Blockly.Cake.Msg.REMOVE_COMMENT = "Remove Comment";
Blockly.Cake.Msg.RENAME_VARIABLE = "Rename variable...";
Blockly.Cake.Msg.RENAME_VARIABLE_TITLE = "Rename all '%1' variables to:";
Blockly.Cake.Msg.TEXT_APPEND_APPENDTEXT = "append text";
Blockly.Cake.Msg.TEXT_APPEND_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Text_modification";
Blockly.Cake.Msg.TEXT_APPEND_TO = "to";
Blockly.Cake.Msg.TEXT_APPEND_TOOLTIP = "Append some text to variable '%1'.";
Blockly.Cake.Msg.TEXT_CHANGECASE_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Adjusting_text_case";
Blockly.Cake.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "to lower case";
Blockly.Cake.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "to Title Case";
Blockly.Cake.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "to UPPER CASE";
Blockly.Cake.Msg.TEXT_CHANGECASE_TOOLTIP = "Return a copy of the text in a different case.";
Blockly.Cake.Msg.TEXT_CHARAT_FIRST = "get first letter";
Blockly.Cake.Msg.TEXT_CHARAT_FROM_END = "get letter # from end";
Blockly.Cake.Msg.TEXT_CHARAT_FROM_START = "get letter #";
Blockly.Cake.Msg.TEXT_CHARAT_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Extracting_text";
Blockly.Cake.Msg.TEXT_CHARAT_INPUT_INTEXT = "in text";
Blockly.Cake.Msg.TEXT_CHARAT_LAST = "get last letter";
Blockly.Cake.Msg.TEXT_CHARAT_RANDOM = "get random letter";
Blockly.Cake.Msg.TEXT_CHARAT_TAIL = "";
Blockly.Cake.Msg.TEXT_CHARAT_TOOLTIP = "Returns the letter at the specified position.";
Blockly.Cake.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Add an item to the text.";
Blockly.Cake.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "join";
Blockly.Cake.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Add, remove, or reorder sections to reconfigure this text block.";
Blockly.Cake.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "to letter # from end";
Blockly.Cake.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "to letter #";
Blockly.Cake.Msg.TEXT_GET_SUBSTRING_END_LAST = "to last letter";
Blockly.Cake.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Extracting_a_region_of_text";
Blockly.Cake.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "in text";
Blockly.Cake.Msg.TEXT_GET_SUBSTRING_START_FIRST = "get substring from first letter";
Blockly.Cake.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "get substring from letter # from end";
Blockly.Cake.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "get substring from letter #";
Blockly.Cake.Msg.TEXT_GET_SUBSTRING_TAIL = "";
Blockly.Cake.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Returns a specified portion of the text.";
Blockly.Cake.Msg.TEXT_INDEXOF_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Finding_text";
Blockly.Cake.Msg.TEXT_INDEXOF_INPUT_INTEXT = "in text";
Blockly.Cake.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "find first occurrence of text";
Blockly.Cake.Msg.TEXT_INDEXOF_OPERATOR_LAST = "find last occurrence of text";
Blockly.Cake.Msg.TEXT_INDEXOF_TAIL = "";
Blockly.Cake.Msg.TEXT_INDEXOF_TOOLTIP = "Returns the index of the first/last occurrence of first text in the second text.  Returns 0 if text is not found.";
Blockly.Cake.Msg.TEXT_ISEMPTY_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Checking_for_empty_text";
Blockly.Cake.Msg.TEXT_ISEMPTY_TITLE = "%1 is empty";
Blockly.Cake.Msg.TEXT_ISEMPTY_TOOLTIP = "Returns true if the provided text is empty.";
Blockly.Cake.Msg.TEXT_JOIN_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Text_creation";
Blockly.Cake.Msg.TEXT_JOIN_TITLE_CREATEWITH = "create text with";
Blockly.Cake.Msg.TEXT_JOIN_TOOLTIP = "Create a piece of text by joining together any number of items.";
Blockly.Cake.Msg.TEXT_LENGTH_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Text_modification";
Blockly.Cake.Msg.TEXT_LENGTH_TITLE = "length of %1";
Blockly.Cake.Msg.TEXT_LENGTH_TOOLTIP = "Returns the number of letters (including spaces) in the provided text.";
Blockly.Cake.Msg.TEXT_PRINT_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Printing_text";
Blockly.Cake.Msg.TEXT_PRINT_TITLE = "print %1";
Blockly.Cake.Msg.TEXT_PRINT_TOOLTIP = "Print the specified text, number or other value.";
Blockly.Cake.Msg.TEXT_PROMPT_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Getting_input_from_the_user";
Blockly.Cake.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Prompt for user for a number.";
Blockly.Cake.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Prompt for user for some text.";
Blockly.Cake.Msg.TEXT_PROMPT_TYPE_NUMBER = "prompt for number with message";
Blockly.Cake.Msg.TEXT_PROMPT_TYPE_TEXT = "prompt for text with message";
Blockly.Cake.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Cake.Msg.TEXT_TEXT_TOOLTIP = "A letter, word, or line of text.";
Blockly.Cake.Msg.TEXT_TRIM_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Trimming_%28removing%29_spaces";
Blockly.Cake.Msg.TEXT_TRIM_OPERATOR_BOTH = "trim spaces from both sides of";
Blockly.Cake.Msg.TEXT_TRIM_OPERATOR_LEFT = "trim spaces from left side of";
Blockly.Cake.Msg.TEXT_TRIM_OPERATOR_RIGHT = "trim spaces from right side of";
Blockly.Cake.Msg.TEXT_TRIM_TOOLTIP = "Return a copy of the text with spaces removed from one or both ends.";
Blockly.Cake.Msg.VARIABLES_DEFAULT_NAME = "item";
Blockly.Cake.Msg.VARIABLES_GET_CREATE_SET = "Create 'set %1'";
Blockly.Cake.Msg.VARIABLES_GET_HELPURL = "https://code.google.com/p/blockly/wiki/Variables#Get";
Blockly.Cake.Msg.VARIABLES_GET_TAIL = "";
Blockly.Cake.Msg.VARIABLES_GET_TITLE = "";
Blockly.Cake.Msg.VARIABLES_GET_TOOLTIP = "Returns the value of this variable.";
Blockly.Cake.Msg.VARIABLES_SET_CREATE_GET = "Create 'get %1'";
Blockly.Cake.Msg.VARIABLES_SET_HELPURL = "https://code.google.com/p/blockly/wiki/Variables#Set";
Blockly.Cake.Msg.VARIABLES_SET_TAIL = "to";
Blockly.Cake.Msg.VARIABLES_SET_TITLE = "set";
Blockly.Cake.Msg.VARIABLES_SET_TOOLTIP = "Sets this variable to be equal to the input.";
Blockly.Cake.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Cake.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Cake.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Cake.Msg.LISTS_INLIST;
Blockly.Cake.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Cake.Msg.LISTS_INLIST;
Blockly.Cake.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Cake.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Cake.Msg.VARIABLES_SET_ITEM = Blockly.Cake.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Cake.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Cake.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Cake.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Cake.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Cake.Msg.VARIABLES_GET_ITEM = Blockly.Cake.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Cake.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Cake.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Cake.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Cake.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Cake.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Cake.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Cake.Msg.CONTROLS_IF_MSG_THEN = Blockly.Cake.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Cake.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Cake.Msg.LISTS_INLIST;
Blockly.Cake.Msg.PROCEDURES_CALLRETURN_CALL = Blockly.Cake.Msg.PROCEDURES_CALLNORETURN_CALL;
Blockly.Cake.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Cake.Msg.LISTS_INLIST;
Blockly.Cake.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Cake.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Cake.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Cake.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Cake.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Cake.Msg.CONTROLS_IF_MSG_IF;
Blockly.Cake.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Cake.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Cake.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Cake.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Cake.Msg.TEXT_APPEND_VARIABLE = Blockly.Cake.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Cake.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Cake.Msg.CONTROLS_IF_MSG_ELSE;
Blockly.Cake.Msg.STDIO_PRINTF_TITLE = 'print';
Blockly.Cake.Msg.STDIP_PRINTF_MUTATOR_PRINTFADD_TITLE = 'add';
Blockly.Cake.Msg.STDIO_SCANF_TITLE = 'input';
Blockly.Cake.Msg.STDIP_SCANF_MUTATOR_SCANFADD_TITLE = 'add';
Blockly.Cake.Msg.STDIO_SCANF_TOOLTIP = '';
Blockly.Cake.Msg.STDIO_SCANF_HELPURL = 'https://en.wikipedia.org/wiki/Scanf_format_string';
Blockly.Cake.Msg.STDIO_NEWLINE_TITLE = 'new line';
Blockly.Cake.Msg.STDIO_NEWLINE_TOOLTIP = 'new line character';
Blockly.Cake.Msg.STDIO_NEWLINE_HELPURL = 'https://en.wikipedia.org/wiki/Newline';
Blockly.Cake.Msg.COMMENT_TITLE = 'add comment';
Blockly.Cake.Msg.COMMENT_MUTATOR_COMMENTADD_TITLE = 'add';
Blockly.Cake.Msg.COMMENT_TOOLTIP = 'A "comment" is a sequence of characters beginning with a forward slash/asterisk combination (/*) that is treated as a single white-space character by the compiler and is otherwise ignored. A comment can include any combination of characters from the representable character set, including newline characters, but excluding the "end comment" delimiter (*/). Comments can occupy more than one line but cannot be nested. Comments can appear anywhere a white-space character is allowed. Since the compiler treats a comment as a single white-space character, you cannot include comments within tokens. The compiler ignores the characters in the comment. Use comments to document your code.';
Blockly.Cake.Msg.STDLIB_CONVERT_TITLE = 'convert string %1 to %2';
Blockly.Cake.Msg.STDLIB_CONVERT_INT = 'int';
Blockly.Cake.Msg.STDLIB_CONVERT_DOUBLE = 'double';
Blockly.Cake.Msg.STDLIB_CONVERT_TOOLTIP = 'Convert stirng to integer or double type.';
Blockly.Cake.Msg.STDLIB_CONVERT_HELPURL = 'https://en.wikipedia.org/wiki/C_string_handling';
Blockly.Cake.Msg.STDLIB_RAND_TITLE = 'generate random number %1';
Blockly.Cake.Msg.STDLIB_RAND_TOOLTIP = 'assign random number';
Blockly.Cake.Msg.STDLIB_RAND_HELPURL = 'https://en.wikipedia.org/wiki/C_mathematical_functions#Random_number_generation';
Blockly.Cake.Msg.STDLIB_RANDSCOPE_TITLE = "scope:%1~%2";
Blockly.Cake.Msg.STDLIB_RANDSCOPE_TOOLTIP = 'assign scope of random number.';
Blockly.Cake.Msg.STDLIB_RANDSCOPE_HELPURL = 'https://en.wikipedia.org/wiki/C_mathematical_functions#Random_number_generation';
Blockly.Cake.Msg.STDLIB_SRAND_TITLE = 'srand %1'; // not use
Blockly.Cake.Msg.STDLIB_MALLOC_TITLE = 'memory allocate, size: %1';
Blockly.Cake.Msg.STDLIB_MALLOC_TOOLTIP = 'Dinamic memory allocation';
Blockly.Cake.Msg.STDLIB_MALLOC_HELPURL = 'https://en.wikipedia.org/wiki/C_dynamic_memory_allocation';
Blockly.Cake.Msg.STDLIB_SIZEOFFORMALLOC_TITLE = 'size of %1';
Blockly.Cake.Msg.STDLIB_SIZEOFFORMALLOC_TOOLTIP = 'return the size by byte';
Blockly.Cake.Msg.STDLIB_SIZEOFFORMALLOC_HELPURL = 'https://en.wikipedia.org/wiki/Sizeof';
Blockly.Cake.Msg.STDLIB_ARITHFORMALLOC_TITLE = '%1 x %2';
Blockly.Cake.Msg.STDLIB_FREE_TITLE = 'memory free %1';
Blockly.Cake.Msg.STDLIB_FREE_TOOLTIP = 'deallocate the memory';
Blockly.Cake.Msg.STDLIB_FREE_HELPURL = 'https://en.wikipedia.org/wiki/C_dynamic_memory_allocation';
Blockly.Cake.Msg.STDLIB_EXIT_TITLE = 'exit %1';
Blockly.Cake.Msg.STDLIB_EXIT_SUCCESS = 'success';
Blockly.Cake.Msg.STDLIB_EXIT_FAILURE = 'failure';
Blockly.Cake.Msg.STDLIB_EXIT_TOOLTIP = 'Exit.';
Blockly.Cake.Msg.STDLIB_EXIT_HELPURL = 'https://en.wikipedia.org/wiki/Exit_(system_call)';
Blockly.Cake.Msg.MATH_SIN_TITLE = 'sin %1'; // not use
Blockly.Cake.Msg.MATH_COS_TITLE = 'cos %1'; // not use
Blockly.Cake.Msg.MATH_TAN_TITLE = 'tan %1'; // not use
Blockly.Cake.Msg.MATH_POW_TITLE = 'pow %1 ^ %2'; //'pow %1 ^ %2';
Blockly.Cake.Msg.MATH_EXP_TITLE = 'exp %1';
Blockly.Cake.Msg.MATH_SQRT_TITLE = 'sqrt %1';
Blockly.Cake.Msg.MATH_ABS_TITLE = 'absolute value%1'; // not use
Blockly.Cake.Msg.MATH_NUMCHECK_TITLE = '%1 is a(an) %2 ?';
Blockly.Cake.Msg.MATH_NUMCHECK_ISFINITE = 'finite value';
Blockly.Cake.Msg.MATH_NUMCHECK_ISINF = 'infinite value';
Blockly.Cake.Msg.MATH_NUMCHECK_SIGNBIT = 'negative value';
Blockly.Cake.Msg.MATH_NUMCHECK_ISNAN = 'NaN value';
Blockly.Cake.Msg.MATH_NUMCHECK_TOOLTIP = '';
Blockly.Cake.Msg.MATH_NUMCOMPARE_TITLE = '%1 is %3 than %2';
Blockly.Cake.Msg.MATH_NUMCOMPARE_ISGREATER = 'greater';
Blockly.Cake.Msg.MATH_NUMCOMPARE_ISLESS = 'less';
Blockly.Cake.Msg.MATH_NUMCOMPARE_ISGREQ = 'greater or equal';
Blockly.Cake.Msg.MATH_NUMCOMPARE_ISLEEQ = 'less or equal';
Blockly.Cake.Msg.MATH_NUMCOMPARE_ISLEGR = 'less or greater';
Blockly.Cake.Msg.MATH_NUMCOMPARE_ISUNORDER = 'unordered';
Blockly.Cake.Msg.MATH_NUMCOMPARE_TOOLTIP = '';
Blockly.Cake.Msg.STRING_STRLEN_TITLE = 'string length %1';
Blockly.Cake.Msg.STRING_STRLEN_TOOLTIP = 'return length of string';
Blockly.Cake.Msg.STRING_STRLEN_HELPURL = 'https://en.wikipedia.org/wiki/C_string_handling';
Blockly.Cake.Msg.STRING_STRCAT_TITLE = 'string add %1 and %2';
Blockly.Cake.Msg.STRING_STRCAT_TOOLTIP = 'concat two strings';
Blockly.Cake.Msg.STRING_STRCAT_HELPURL = 'https://en.wikipedia.org/wiki/C_string_handling';
Blockly.Cake.Msg.STRING_STRCPY_TITLE = 'string copy from %1 to %2';
Blockly.Cake.Msg.STRING_STRCPY_TOOLTIP = 'copy first string into second string';
Blockly.Cake.Msg.STRING_STRCPY_HELPURL = 'https://en.wikipedia.org/wiki/C_string_handling';
Blockly.Cake.Msg.STRING_STRCMP_TITLE = 'string compare %1 and %2';
Blockly.Cake.Msg.STRING_STRCMP_TOOLTIP = 'compare two strings';
Blockly.Cake.Msg.STRING_STRCMP_HELPURL = 'https://en.wikipedia.org/wiki/C_string_handling';

Blockly.Cake.Msg.TIME_REQUIREDTIME_TITLE = 'time to do followings';
Blockly.Cake.Msg.TIME_REQRUIEDTIME_TALE = 'save in double variable %1';
Blockly.Cake.Msg.TIME_TIME_CURRENT_TITLE = 'print current time';

Blockly.Cake.Msg.VARIABLES_SET_DIST_VARIABLE = 'variable';
Blockly.Cake.Msg.VARIABLES_SET_DIST_POINTER = 'pointer';
Blockly.Cake.Msg.VARIABLES_SET_DIST_ARRAY = 'array';
Blockly.Cake.Msg.VARIABLES_SET_POINTER_SPEC_ONE = '*';
Blockly.Cake.Msg.VARIABLES_SET_POINTER_SPEC_TWO = '**';
Blockly.Cake.Msg.VARIABLES_SET_ARRAY_SPEC_ONE = '[]';
Blockly.Cake.Msg.VARIABLES_SET_ARRAY_SPEC_TWO = '[][]';
Blockly.Cake.Msg.VARIABLES_SET_ARRAY_SPEC_THREE = '[][][]';
Blockly.Cake.Msg.VARIABLES_SET_TYPE_INT = 'integer';
Blockly.Cake.Msg.VARIABLES_SET_TYPE_UNSIGNED_INT= 'unsigned int';
Blockly.Cake.Msg.VARIABLES_SET_TYPE_FLOAT = 'real number(float)';
Blockly.Cake.Msg.VARIABLES_SET_TYPE_DOUBLE = 'real number(double)';
Blockly.Cake.Msg.VARIABLES_SET_TYPE_CHAR= 'character';
Blockly.Cake.Msg.VARIABLES_SET_ITERATION_NORMAL = '*';
Blockly.Cake.Msg.VARIABLES_SET_ITERATION_DOUBLE = '**';
Blockly.Cake.Msg.VARIABLES_SET_ITERATION_TRIPLE = '***';
Blockly.Cake.Msg.VARIABLES_DECLARE_TITLE = 'variable, type';
Blockly.Cake.Msg.VARIABLES_DECLARE_NAME = 'name';
Blockly.Cake.Msg.VARIABLES_DECLARE_INIT = 'initial value';
Blockly.Cake.Msg.VARIABLES_DECLARE_DEFAULT_NAME = 'myVariable';
Blockly.Cake.Msg.VARIABLES_POINTER_DECLARE_TITLE = 'pointer, type';
Blockly.Cake.Msg.VARIABLES_POINTER_DECLARE_ITERATION = '';
Blockly.Cake.Msg.VARIABLES_POINTER_DECLARE_DEFAULT_NAME = 'myPointer';
Blockly.Cake.Msg.VARIABLES_ARRAY_DECLARE_TITLE = 'array, type';
Blockly.Cake.Msg.VARIABLES_ARRAY_DECLARE_LENGTH = 'length';
Blockly.Cake.Msg.VARIABLES_ARRAY_DECLARE_DEFAULT_NAME = 'myArray';
Blockly.Cake.Msg.VARIABLES_RETURN = 'return ';

Blockly.Cake.Msg.POINTER_GET_TITLE = "";
Blockly.Cake.Msg.ARRAY_GET_TITLE = "";

Blockly.Cake.Msg.FUNCTION_SET_TYPE_INT = 'int';
Blockly.Cake.Msg.FUNCTION_SET_TYPE_INT = 'int';
Blockly.Cake.Msg.FUNCTION_SET_TYPE_FLOAT = 'float';
Blockly.Cake.Msg.FUNCTION_SET_TYPE_DOUBLE = 'double';
Blockly.Cake.Msg.FUNCTION_SET_TYPE_LONG = 'long';
Blockly.Cake.Msg.FUNCTION_SET_TYPE_LONGLONG = 'long long';
Blockly.Cake.Msg.FUNCTION_SET_TYPE_SHORT = 'short';
Blockly.Cake.Msg.FUNCTION_SET_TYPE_LONGDOUBLE = 'long double';
Blockly.Cake.Msg.FUNCTION_SET_TYPE_CHAR = 'char';

Blockly.Cake.Msg.DEFINE_DECLARE_TITLE = 'macro';
Blockly.Cake.Msg.DEFINE_DECLARE_INIT = 'value';
Blockly.Cake.Msg.DEFINE_DECLARE_DEFAULT_NAME = 'myMacro';
Blockly.Cake.Msg.DEFINE_GET_TITLE = '';
Blockly.Cake.Msg.DEFINE_SET_TYPE_CONSTANT = 'constant';
Blockly.Cake.Msg.DEFINE_SET_TYPE_MACRO = 'macro';

Blockly.Cake.Msg.MAIN_BLOCK = 'main with: int argc, char** argv';
Blockly.Cake.Msg.MAIN_BLOCK_RETURN = "int type return value:";

Blockly.Cake.Msg.CONTROLS_SWITCH = 'if following value';
Blockly.Cake.Msg.CONTROLS_SWITCH_CASE = 'matches with';

Blockly.Cake.Msg.STRUCTURE_DEFINE_TITLE = 'structure type name';
Blockly.Cake.Msg.STRUCTURE_DEFINE_NAME = 'myStructure';
Blockly.Cake.Msg.STRUCTURE_MUTATORCONTAINER_TITLE = 'members';
Blockly.Cake.Msg.STRUCTURE_MUTATORMEM_VAR= 'variable type';
Blockly.Cake.Msg.STRUCTURE_MUTATORMEM_POINTER= 'pointer type';
Blockly.Cake.Msg.STRUCTURE_MUTATORMEM_ARRAY= 'array type';
Blockly.Cake.Msg.STRUCTURE_MUTATORARG_NAME = 'name';

Blockly.Cake.Msg.STRUCTURE_DECLARE_TITLE = 'type';
Blockly.Cake.Msg.STRUCTURE_DECLARE_TALE = 'name';
Blockly.Cake.Msg.STRUCTURE_DECLARE_NAME = 'myStructure1';

Blockly.Cake.Msg.STRUCTURE_SET_NAME = 'name';
Blockly.Cake.Msg.STRUCTURE_SET_MEMBER = 'member';

Blockly.Cake.Msg.STRUCTURE_GET_NAME = 'name';
Blockly.Cake.Msg.STRUCTURE_GET_MEMBER = 'member';

Blockly.Cake.Msg.UNION_DEFINE_NAME = 'myUnion';

Blockly.Cake.Msg.PROCEDURES_RETURN_TITLE = 'terminate function after return ';
Blockly.Cake.Msg.PROCEDURES_RETURN_TOOLTIP = 'Terminate function after return what you want to return. you can use it in anywhere';
Blockly.Cake.Msg.PLZ_OUT_OF_BLOCK = 'Warning: This block can be placed out of other blocks except function block.';
Blockly.Cake.Msg.PLZ_INSIDE_FUNCTION = 'Warning: Place this block inside a function.';
Blockly.Cake.Msg.PLZ_OUT_OF_FUNCTION = 'Warning: Place this block out of a function.';
Blockly.Cake.Msg.SELECT_MENU = '--Select--';
Blockly.Cake.Msg.SELECT_TYPE = '--Type--';

Blockly.Cake.Msg.TAG_DEFINE_DECLARE = ['macro', 'constant'];
Blockly.Cake.Msg.TAG_DEFINE_GET = ['macro', 'constant', 'get'];
Blockly.Cake.Msg.TAG_VARIABLE_DECLARE = ['variables', 'declare', 'define', 'declaration', 'definition'];
Blockly.Cake.Msg.TAG_VARIABLE_SET = ['variables', 'assignment', 'set'];
Blockly.Cake.Msg.TAG_VARIABLE_GET = ['variables', 'get'];
Blockly.Cake.Msg.TAG_VARIABLE_POINTER_DECLARE = ['pointer', 'declare', 'define', 'declaration', 'definition'];
Blockly.Cake.Msg.TAG_VARIABLE_POINTER_SET = ['pointer', 'assignment', 'set'];
Blockly.Cake.Msg.TAG_VARIABLE_POINTER_GET = ['pointer', 'get'];
Blockly.Cake.Msg.TAG_VARIABLE_POINTER_ADDR = ['&', 'address'];
Blockly.Cake.Msg.TAG_VARIABLE_POINTER_ASTR = ['*', 'asterisk'];
Blockly.Cake.Msg.TAG_VARIABLE_ARRAY_DECLARE = ['array', 'declare', 'define', 'declaration', 'definition'];
Blockly.Cake.Msg.TAG_VARIABLE_ARRAY_SET = ['array', 'assignment', 'set'];
Blockly.Cake.Msg.TAG_VARIABLE_ARRAY_GET = ['array', 'get'];

Blockly.Cake.Msg.TAG_STRUCTURE_DEFINE = ['structure', 'typedef', 'declare', 'define', 'declaration', 'definition'];
Blockly.Cake.Msg.TAG_STRUCTURE_DECLARE = ['structure', 'declare', 'define', 'declaration', 'definition'];
Blockly.Cake.Msg.TAG_STRUCTURE_GET = ['structure', 'get'];
Blockly.Cake.Msg.TAG_STRUCTURE_SET = ['structure', 'assignment', 'set'];

Blockly.Cake.Msg.TAG_LOGIC_IF = ['if', 'if else', 'ifelse'];
Blockly.Cake.Msg.TAG_LOGIC_COMPARE = ['compare'];
Blockly.Cake.Msg.TAG_LOGIC_OPERATION = ['operation', 'and', 'or'];
Blockly.Cake.Msg.TAG_LOGIC_NEGATE = ['!', 'negate'];
Blockly.Cake.Msg.TAG_LOGIC_BOOLEAN = ['boolean', 'true', 'false'];
Blockly.Cake.Msg.TAG_LOGIC_NULL = ['null', 'null character'];
Blockly.Cake.Msg.TAG_LOGIC_TERNARY = ['?'];
Blockly.Cake.Msg.TAG_LOGIC_SWITCH = ['switch', 'case'];

Blockly.Cake.Msg.TAG_LOOP_WHILE = ['while', 'loop'];
Blockly.Cake.Msg.TAG_LOOP_FOR = ['for', 'loop'];
Blockly.Cake.Msg.TAG_LOOP_FLOW = ['break', 'continue'];

Blockly.Cake.Msg.TAG_PROCEDURE_DEFNORETURN = ['void', 'function'];
Blockly.Cake.Msg.TAG_PROCEDURE_DEFRETURN = ['function'];

Blockly.Cake.Msg.TAG_MATH_NUMBER = ['number'];
Blockly.Cake.Msg.TAG_MATH_ARITHMETIC = ['number', 'arithmetic', 'additionsubtractionmultiplicationdivision', '+-*/'];
Blockly.Cake.Msg.TAG_MATH_MODULO = ['arithmetic', 'remainder', '%'];

Blockly.Cake.Msg.TAG_STDIO_PRINTF = ['stdio.h', 'printf()', 'output', 'out'];
Blockly.Cake.Msg.TAG_STDIO_TEXT = ['stdio.h', 'text'];
Blockly.Cake.Msg.TAG_STDIO_NEWLINE = ['stdio.h', 'newline', 'new line', '\n', 'change line', 'line change'];
Blockly.Cake.Msg.TAG_STDIO_SCANF = ['stdio.h', 'scanf()', 'input'];

Blockly.Cake.Msg.TAG_COMMENT = ['comment', 'Comment', '\/\/', '\/**\/'];

Blockly.Cake.Msg.TAG_STDLIB_CONVERT = ['stdlib.h', 'convert', 'atoi()', 'atof()'];
Blockly.Cake.Msg.TAG_STDLIB_RAND = ['stdlib.h', 'random number'];
Blockly.Cake.Msg.TAG_STDLIB_MALLOC = ['stdlib.h', 'malloc()', 'memory allocation', 'memory allocate'];
Blockly.Cake.Msg.TAG_STDLIB_SIZEOF = ['stdlib.h', 'sizeof()', 'size of', 'sizeOf'];
Blockly.Cake.Msg.TAG_STDLIB_FREE = ['stdlib.h', 'free()'];
Blockly.Cake.Msg.TAG_STDLIB_EXIT = ['stdlib.h', 'exit(0)', 'exit(1)', 'end', 'the end'];

Blockly.Cake.Msg.TAG_STRING_STRLEN = ['string.h', 'strlen()', 'string length', 'length of string'];
Blockly.Cake.Msg.TAG_STRING_STRCAT = ['string.h', 'strcat()', 'string concatenate', 'concatenate string'];
Blockly.Cake.Msg.TAG_STRING_STRCPY = ['string.h', 'strcpy()', 'string copy', 'copy string'];
Blockly.Cake.Msg.TAG_STRING_STRCMP = ['string.h', 'strcmp()', 'string compare', 'compare string'];

Blockly.Cake.Msg.TAG_MATH_ABS = ['math.h', 'absolute value'];
Blockly.Cake.Msg.TAG_MATH_TRIG = ['math.h', 'trigonometric function', 'sin()', 'cos()', 'tan()', 'sine function', 'cosine function', 'tangent function'];
Blockly.Cake.Msg.TAG_MATH_LOGS = ['math.h', 'log()', 'loge()', 'log10()', 'log2()', 'log e'];
Blockly.Cake.Msg.TAG_MATH_POW = ['math.h', 'power', 'pow()'];
Blockly.Cake.Msg.TAG_MATH_EXP = ['math.h', 'exponential function', 'exp()'];
Blockly.Cake.Msg.TAG_MATH_SQRT = ['math.h', 'sqrt()', 'square root'];
Blockly.Cake.Msg.TAG_MATH_ROUND = ['math.h', 'round up', 'round down', 'round()', 'trunc()', 'ceil()', 'floor()', 'truncate'];
Blockly.Cake.Msg.TAG_MATH_NUMCHECK = ['math.h', 'two number check'];
Blockly.Cake.Msg.TAG_MATH_NUMCOMPARE = ['math.h', 'two number compare'];

Blockly.Cake.Msg.TAG_TIME_CURRENT = ['time.h', 'get current time', 'print current time'];
Blockly.Cake.Msg.TAG_TIME_REQUIREDTIME = ['time.h', 'the time to do followings'];

Blockly.Cake.Msg.PROCEDURES_ILLEGALNAME = 'illegal function name';
Blockly.Cake.Msg.VARIABLES_ILLEGALNAME = 'illegal variable name';
Blockly.Cake.Msg.STRUCTURE_ILLEGALNAME = 'illegal structure name';

Blockly.Cake.Msg.CONTROLS_SWITCH_BREAK_WARNING = "WARNING : This block must be in switch block.";
Blockly.Cake.Msg.CONTROLS_SWITCH_BREAK = 'break';
Blockly.Cake.Msg.CONTROLS_SWITCH_BREAK_TOOLTIP = 'break the statement and leave the switch block.';
Blockly.Cake.Msg.CONTROLS_SWITCH_DEFAULT = 'matches with nothing';
Blockly.Cake.Msg.CONTROLS_SWITCH_DO = "do";
Blockly.Cake.Msg.CONTROLS_SWITCH_TOOLTIP1 = "if there are no corresponding value, do first block statement and if value correspond with second value, do second block statement.";
Blockly.Cake.Msg.CONTROLS_SWITCH_TOOLTIP2 = "if there are no corresponding value, do first block statement, if value correspond with second value, do second block statement, and if value correspond with third value, do third block statement.";
Blockly.Cake.Msg.CONTROLS_SWITCH_TOOLTIP3 = "if there are no corresponding value, do first block statement and if value correspond with second value, do second block statement, .... , and if value correspond with last value, do last block statement.";
Blockly.Cake.Msg.CONTROLS_SWITCH_TOOLTIP4 = "if there are no corresponding value, do first block statement and if value correspond with second value, do second block statement, .... , and if value correspond with last value, do last block statement.";
Blockly.Cake.Msg.CONTROLS_SWITCH_CASE_TOOLTIP = "Add case."

Blockly.Cake.Msg.MAINPROCEDURES_TOOLTIP = "basically provided main function block. return integer value";

Blockly.Cake.Msg.STRUCTURE_DEFINE_TOOPTIP = "define structure. you can add, delete, rename the member of structure. it must be before using structure.";
Blockly.Cake.Msg.STRUCTURE_DECLARE_TOOPTIP = "declare structure by selecting predefined structure(similar with declaring variables). it must be before using structure.";
Blockly.Cake.Msg.STRUCTURE_GET_TOOLTIP = "return value of structure member or structure itself.";
Blockly.Cake.Msg.STRUCTURE_SET_TOOLTIP = "assignment(set) the value into structure member or structure itself.";
Blockly.Cake.Msg.STRUCTURE_MUTATORCONTAINER_TOOLTIP = "add, delete, or rearrange member.";
Blockly.Cake.Msg.STRUCTURE_MUTATORARG_TOOLTIP = "add member of structure."

Blockly.Cake.Msg.TIME_CURRENT_TOOLTIP = "print current time with the form \"0000(year)-00(month)-00(day)-00(hour)-00(miniute)-00(seconds)\"";
Blockly.Cake.Msg.TIME_REQUIREDTIME_TOOLTIP = "save the time that is taken for doing followings into double variable";

Blockly.Cake.Msg.VARIABLES_DECLARE_TOOLTIP = "declare variables";